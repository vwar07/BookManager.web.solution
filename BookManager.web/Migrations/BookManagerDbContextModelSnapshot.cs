// <auto-generated />
using System;
using BookManager.web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookManager.web.Migrations
{
    [DbContext(typeof(BookManagerDbContext))]
    partial class BookManagerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookManager.web.Data.Models.EntityModels.Transaction.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(4);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(3);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(5);

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Author");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 996, DateTimeKind.Local).AddTicks(1497),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            IsDeleted = false,
                            LastName = "Doe",
                            PhoneNumber = "+1234567890"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 996, DateTimeKind.Local).AddTicks(2648),
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            IsDeleted = false,
                            LastName = "Smith",
                            PhoneNumber = "+1987654321"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 996, DateTimeKind.Local).AddTicks(2652),
                            Email = "emily.johnson@example.com",
                            FirstName = "Emily",
                            IsDeleted = false,
                            LastName = "Johnson",
                            PhoneNumber = "+1123456789"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 996, DateTimeKind.Local).AddTicks(2654),
                            Email = "michael.brown@example.com",
                            FirstName = "Michael",
                            IsDeleted = false,
                            LastName = "Brown",
                            PhoneNumber = "+1445566778"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 996, DateTimeKind.Local).AddTicks(2655),
                            Email = "robert.martin@example.com",
                            FirstName = "Robert",
                            IsDeleted = false,
                            LastName = "Martin",
                            PhoneNumber = "+1556677889"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 996, DateTimeKind.Local).AddTicks(2656),
                            Email = "adam.freeman@example.com",
                            FirstName = "Adam",
                            IsDeleted = false,
                            LastName = "Freeman",
                            PhoneNumber = "+1667788990"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 996, DateTimeKind.Local).AddTicks(2658),
                            Email = "andrew.troelsen@example.com",
                            FirstName = "Andrew",
                            IsDeleted = false,
                            LastName = "Troelsen",
                            PhoneNumber = "+1778899001"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 996, DateTimeKind.Local).AddTicks(2659),
                            Email = "andrew.hunt@example.com",
                            FirstName = "Andrew",
                            IsDeleted = false,
                            LastName = "Hunt",
                            PhoneNumber = "+1889900112"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 996, DateTimeKind.Local).AddTicks(2660),
                            Email = "martin.fowler@example.com",
                            FirstName = "Martin",
                            IsDeleted = false,
                            LastName = "Fowler",
                            PhoneNumber = "+1990011223"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 996, DateTimeKind.Local).AddTicks(2662),
                            Email = "eric.freeman@example.com",
                            FirstName = "Eric",
                            IsDeleted = false,
                            LastName = "Freeman",
                            PhoneNumber = "+1101122334"
                        });
                });

            modelBuilder.Entity("BookManager.web.Data.Models.EntityModels.Transaction.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int")
                        .HasColumnOrder(9);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnOrder(3);

                    b.Property<string>("ImageLocation")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnOrder(7);

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)")
                        .HasColumnOrder(6);

                    b.Property<int?>("PublisherId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Book");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            AvailableQuantity = 50,
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 997, DateTimeKind.Local).AddTicks(1313),
                            Description = "A comprehensive guide to learning the C# programming language, covering basics to advanced concepts.",
                            ImageLocation = "/images/csharp_programming.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Price = 29.99m,
                            PublisherId = 1,
                            Title = "C# Programming"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            AvailableQuantity = 0,
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 997, DateTimeKind.Local).AddTicks(3685),
                            Description = "An advanced book for developers to master .NET Core framework and build scalable applications.",
                            ImageLocation = "/images/mastering_dotnet_core.jpg",
                            IsAvailable = false,
                            IsDeleted = false,
                            Price = 39.99m,
                            PublisherId = 2,
                            Title = "Mastering .NET Core"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            AvailableQuantity = 20,
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 997, DateTimeKind.Local).AddTicks(3691),
                            Description = "Learn how to use Entity Framework to handle database operations efficiently in your .NET applications.",
                            ImageLocation = "/images/entity_framework_essentials.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Price = 24.99m,
                            PublisherId = 3,
                            Title = "Entity Framework Essentials"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 4,
                            AvailableQuantity = 25,
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 997, DateTimeKind.Local).AddTicks(3792),
                            Description = "A beginner-friendly book to understand and build web applications using ASP.NET Core.",
                            ImageLocation = "/images/learning_aspnet_core.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Price = 34.99m,
                            PublisherId = 4,
                            Title = "Learning ASP.NET Core"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 5,
                            AvailableQuantity = 0,
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 997, DateTimeKind.Local).AddTicks(3795),
                            Description = "A practical guide to implementing clean architecture principles for robust and maintainable codebases.",
                            ImageLocation = "/images/clean_architecture.jpg",
                            IsAvailable = false,
                            IsDeleted = false,
                            Price = 49.99m,
                            PublisherId = 5,
                            Title = "Clean Architecture"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 6,
                            AvailableQuantity = 40,
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 997, DateTimeKind.Local).AddTicks(3797),
                            Description = "A professional guide to building modern web applications using ASP.NET Core MVC framework.",
                            ImageLocation = "/images/pro_aspnet_core_mvc.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Price = 44.99m,
                            PublisherId = 6,
                            Title = "Pro ASP.NET Core MVC"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 7,
                            AvailableQuantity = 35,
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 997, DateTimeKind.Local).AddTicks(3800),
                            Description = "An in-depth exploration of C# programming, designed for both novice and experienced developers.",
                            ImageLocation = "/images/programming_in_csharp.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Price = 54.99m,
                            PublisherId = 7,
                            Title = "Programming in C#"
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 8,
                            AvailableQuantity = 45,
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 997, DateTimeKind.Local).AddTicks(3802),
                            Description = "A timeless guide to software development best practices and tips for pragmatic programmers.",
                            ImageLocation = "/images/the_pragmatic_programmer.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Price = 42.99m,
                            PublisherId = 8,
                            Title = "The Pragmatic Programmer"
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 9,
                            AvailableQuantity = 28,
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 997, DateTimeKind.Local).AddTicks(3804),
                            Description = "An insightful book on improving the design of existing code without changing its functionality.",
                            ImageLocation = "/images/refactoring.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Price = 39.99m,
                            PublisherId = 9,
                            Title = "Refactoring"
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 10,
                            AvailableQuantity = 22,
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 997, DateTimeKind.Local).AddTicks(3806),
                            Description = "A visually engaging book that simplifies complex design patterns for easier understanding and application.",
                            ImageLocation = "/images/head_first_design_patterns.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Price = 49.99m,
                            PublisherId = 10,
                            Title = "Head First Design Patterns"
                        });
                });

            modelBuilder.Entity("BookManager.web.Data.Models.EntityModels.Transaction.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("BookManager.web.Data.Models.EntityModels.Transaction.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnOrder(8);

                    b.Property<int?>("BookId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int?>("CartId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(7);

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<decimal>("ToatalAmount")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CartId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("BookManager.web.Data.Models.EntityModels.Transaction.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuildingAndStreet")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnOrder(3);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(2);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(4);

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Publisher");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuildingAndStreet = "80 Strand, London",
                            Country = "United Kingdom",
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 993, DateTimeKind.Local).AddTicks(4921),
                            IsDeleted = false,
                            Name = "Penguin",
                            State = "London"
                        },
                        new
                        {
                            Id = 2,
                            BuildingAndStreet = "1005 Gravenstein Highway North",
                            Country = "United States",
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 994, DateTimeKind.Local).AddTicks(9722),
                            IsDeleted = false,
                            Name = "O'Reilly Media",
                            State = "California"
                        },
                        new
                        {
                            Id = 3,
                            BuildingAndStreet = "Livery Place, 35 Livery Street",
                            Country = "United Kingdom",
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 994, DateTimeKind.Local).AddTicks(9743),
                            IsDeleted = false,
                            Name = "Packt Publishing",
                            State = "Birmingham"
                        },
                        new
                        {
                            Id = 4,
                            BuildingAndStreet = "One Microsoft Way",
                            Country = "United States",
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 994, DateTimeKind.Local).AddTicks(9745),
                            IsDeleted = false,
                            Name = "Microsoft Press",
                            State = "Washington"
                        },
                        new
                        {
                            Id = 5,
                            BuildingAndStreet = "501 Boylston Street",
                            Country = "United States",
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 994, DateTimeKind.Local).AddTicks(9746),
                            IsDeleted = false,
                            Name = "Prentice Hall",
                            State = "Massachusetts"
                        },
                        new
                        {
                            Id = 6,
                            BuildingAndStreet = "233 Spring Street",
                            Country = "United States",
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 994, DateTimeKind.Local).AddTicks(9748),
                            IsDeleted = false,
                            Name = "Apress",
                            State = "New York"
                        },
                        new
                        {
                            Id = 7,
                            BuildingAndStreet = "625 Avenue of the Americas",
                            Country = "United States",
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 994, DateTimeKind.Local).AddTicks(9750),
                            IsDeleted = false,
                            Name = "Apress",
                            State = "New York"
                        },
                        new
                        {
                            Id = 8,
                            BuildingAndStreet = "75 Arlington Street",
                            Country = "United States",
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 994, DateTimeKind.Local).AddTicks(9752),
                            IsDeleted = false,
                            Name = "Addison-Wesley",
                            State = "Massachusetts"
                        },
                        new
                        {
                            Id = 9,
                            BuildingAndStreet = "501 Boylston Street",
                            Country = "United States",
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 994, DateTimeKind.Local).AddTicks(9753),
                            IsDeleted = false,
                            Name = "Addison-Wesley",
                            State = "Massachusetts"
                        },
                        new
                        {
                            Id = 10,
                            BuildingAndStreet = "1005 Gravenstein Highway North",
                            Country = "United States",
                            CreatedDateTime = new DateTime(2024, 12, 22, 22, 35, 58, 994, DateTimeKind.Local).AddTicks(9754),
                            IsDeleted = false,
                            Name = "O'Reilly Media",
                            State = "California"
                        });
                });

            modelBuilder.Entity("BookManager.web.Data.Models.Identity.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("BookManager.web.Data.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BookManager.web.Data.Models.EntityModels.Transaction.Book", b =>
                {
                    b.HasOne("BookManager.web.Data.Models.EntityModels.Transaction.Author", "Authors")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("BookManager.web.Data.Models.EntityModels.Transaction.Publisher", "Publishers")
                        .WithMany()
                        .HasForeignKey("PublisherId");

                    b.Navigation("Authors");

                    b.Navigation("Publishers");
                });

            modelBuilder.Entity("BookManager.web.Data.Models.EntityModels.Transaction.Cart", b =>
                {
                    b.HasOne("BookManager.web.Data.Models.EntityModels.Transaction.Book", "Books")
                        .WithMany()
                        .HasForeignKey("BookId");

                    b.HasOne("BookManager.web.Data.Models.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookManager.web.Data.Models.EntityModels.Transaction.OrderDetail", b =>
                {
                    b.HasOne("BookManager.web.Data.Models.EntityModels.Transaction.Book", "Books")
                        .WithMany()
                        .HasForeignKey("BookId");

                    b.HasOne("BookManager.web.Data.Models.EntityModels.Transaction.Cart", "Carts")
                        .WithMany()
                        .HasForeignKey("CartId");

                    b.HasOne("BookManager.web.Data.Models.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Books");

                    b.Navigation("Carts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("BookManager.web.Data.Models.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("BookManager.web.Data.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("BookManager.web.Data.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("BookManager.web.Data.Models.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookManager.web.Data.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("BookManager.web.Data.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
